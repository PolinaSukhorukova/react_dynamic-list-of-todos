{"version":3,"sources":["types/FilterType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterType","TodoList","todos","selectTodo","selectedTodo","className","map","todo","id","title","completed","isSelected","cn","type","onClick","TodoFilter","filterBy","setFilterBy","setQuery","query","clearFilters","value","onChange","event","target","ALL","ACTIVE","COMPLITED","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","TodoModal","closeTodo","useState","user","setUser","isUserLoaded","setIsUserLoaded","userHasError","setUserHasError","findUser","a","foundUser","useEffect","href","email","name","App","setTodos","setSelectedTodo","isLoaded","setIsLoaded","isTodosLoaded","setIsTodosLoaded","loadHasError","setLoadHasError","getAllTodos","useCallback","allTodos","visibleTodos","filterType","filter","toLowerCase","includes","getFilteredTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2979418a.chunk.js","sourcesContent":["export enum FilterType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLITED = 'complited',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectTodo: (todo: Todo) => void,\n  selectedTodo: Todo | null,\n};\n\nexport const TodoList: React.FC<Props> = (\n  {\n    todos,\n    selectTodo,\n    selectedTodo,\n  },\n) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const { id, title, completed } = todo;\n          const isSelected = id === selectedTodo?.id;\n\n          return (\n            <tr\n              key={id}\n              data-cy=\"todo\"\n              className=\"\"\n            >\n              <td className=\"is-vcentered\">\n                {id}\n              </td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={cn({\n                  'has-text-danger': !completed,\n                  'has-text-success': completed,\n                })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => selectTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={cn('far', {\n                      'fa-eye': !isSelected,\n                      'fa-eye-slash': isSelected,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { FilterType } from '../../types/FilterType';\n\ntype Props = {\n  filterBy: FilterType,\n  setFilterBy: (filterType: FilterType) => void,\n  setQuery: (query: string) => void,\n  query: string,\n  clearFilters: () => void,\n};\n\nexport const TodoFilter: React.FC<Props> = (\n  {\n    filterBy,\n    setFilterBy,\n    setQuery,\n    query,\n    clearFilters,\n  },\n) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filterBy}\n          onChange={(event) => (\n            setFilterBy(event.target.value as FilterType)\n          )}\n        >\n          <option value={FilterType.ALL}>All</option>\n          <option value={FilterType.ACTIVE}>Active</option>\n          <option value={FilterType.COMPLITED}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => setQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => clearFilters()}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\n\ntype Props = {\n  todo: Todo\n  closeTodo: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, closeTodo }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isUserLoaded, setIsUserLoaded] = useState(false);\n  const [userHasError, setUserHasError] = useState(false);\n  const { id, title, userId } = todo;\n\n  const findUser = async () => {\n    try {\n      const foundUser = await getUser(userId);\n\n      setUser(foundUser);\n    } catch {\n      setUserHasError(true);\n    } finally {\n      setIsUserLoaded(true);\n    }\n  };\n\n  useEffect(() => {\n    findUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isUserLoaded ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n              {/* Todo #2 */}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong className=\"has-text-danger\">Planned</strong>\n\n              {' by '}\n\n              {userHasError\n                ? ('anonymous')\n                : (\n                  <a href={`mailto:${user?.email}`}>\n                    {user?.name}\n                  </a>\n                )}\n            </p>\n          </div>\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\n// components\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\n// get data from server\nimport { getTodos } from './api';\n\n// types\nimport { Todo } from './types/Todo';\nimport { FilterType } from './types/FilterType';\n\nexport function getFilteredTodos(\n  todos: Todo[],\n  filterType: FilterType,\n  query: string,\n) {\n  let visibleTodos = [...todos];\n\n  switch (filterType) {\n    case FilterType.ACTIVE:\n      visibleTodos = visibleTodos.filter(todo => !todo.completed);\n      break;\n\n    case FilterType.COMPLITED:\n      visibleTodos = visibleTodos.filter(todo => todo.completed);\n      break;\n\n    case FilterType.ALL:\n    default:\n      break;\n  }\n\n  return visibleTodos.filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n}\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isTodosLoaded, setIsTodosLoaded] = useState(false);\n  const [loadHasError, setLoadHasError] = useState(false);\n\n  const [filterBy, setFilterBy] = useState<FilterType>(FilterType.ALL);\n  const [query, setQuery] = useState('');\n\n  const getAllTodos = useCallback(async () => {\n    setLoadHasError(false);\n\n    try {\n      const allTodos = await getTodos();\n\n      setTodos(allTodos);\n      setIsTodosLoaded(true);\n    } catch {\n      setLoadHasError(true);\n    } finally {\n      setIsLoaded(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    getAllTodos();\n  }, []);\n\n  const visibleTodos = getFilteredTodos(todos, filterBy, query);\n  // console.log(visibleTodos);\n\n  const selectTodo = useCallback((todo: Todo) => {\n    setSelectedTodo(todo);\n  }, [selectedTodo]);\n\n  const closeTodo = useCallback(() => {\n    setSelectedTodo(null);\n  }, [selectedTodo]);\n\n  const clearFilters = () => {\n    setQuery('');\n    setFilterBy(FilterType.ALL);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filterBy={filterBy}\n                setFilterBy={setFilterBy}\n                setQuery={setQuery}\n                query={query}\n                clearFilters={clearFilters}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!isLoaded && <Loader />}\n\n              {loadHasError && (\n                <p>No loaded user</p>\n              )}\n\n              {isTodosLoaded && (\n                <TodoList\n                  todos={visibleTodos}\n                  selectTodo={selectTodo}\n                  selectedTodo={selectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          closeTodo={closeTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}